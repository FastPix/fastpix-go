// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// PlaybackIDAccessPolicy - Determines if access to the streamed content is kept private or available to all.
type PlaybackIDAccessPolicy string

const (
	PlaybackIDAccessPolicyPublic  PlaybackIDAccessPolicy = "public"
	PlaybackIDAccessPolicyPrivate PlaybackIDAccessPolicy = "private"
	PlaybackIDAccessPolicyDrm     PlaybackIDAccessPolicy = "drm"
)

func (e PlaybackIDAccessPolicy) ToPointer() *PlaybackIDAccessPolicy {
	return &e
}
func (e *PlaybackIDAccessPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		fallthrough
	case "drm":
		*e = PlaybackIDAccessPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackIDAccessPolicy: %v", v)
	}
}

// PlaybackIDDomainsDefaultPolicy - This sets the default behavior for domain access (either "allow" or "deny").
type PlaybackIDDomainsDefaultPolicy string

const (
	PlaybackIDDomainsDefaultPolicyAllow PlaybackIDDomainsDefaultPolicy = "allow"
	PlaybackIDDomainsDefaultPolicyDeny  PlaybackIDDomainsDefaultPolicy = "deny"
)

func (e PlaybackIDDomainsDefaultPolicy) ToPointer() *PlaybackIDDomainsDefaultPolicy {
	return &e
}
func (e *PlaybackIDDomainsDefaultPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = PlaybackIDDomainsDefaultPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackIDDomainsDefaultPolicy: %v", v)
	}
}

// PlaybackIDDomains - Restrictions based on the originating domain of a request (e.g., whether requests from certain websites should be allowed or blocked).
type PlaybackIDDomains struct {
	// This sets the default behavior for domain access (either "allow" or "deny").
	DefaultPolicy *PlaybackIDDomainsDefaultPolicy `json:"defaultPolicy,omitempty"`
	// A list of domains that are explicitly allowed access.
	Allow []string `json:"allow,omitempty"`
	// A list of domains that are explicitly blocked from accessing the resource.
	Deny []string `json:"deny,omitempty"`
}

func (o *PlaybackIDDomains) GetDefaultPolicy() *PlaybackIDDomainsDefaultPolicy {
	if o == nil {
		return nil
	}
	return o.DefaultPolicy
}

func (o *PlaybackIDDomains) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *PlaybackIDDomains) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

// PlaybackIDUserAgentsDefaultPolicy - This sets the default behavior for user agent access (either "allow" or "deny").
type PlaybackIDUserAgentsDefaultPolicy string

const (
	PlaybackIDUserAgentsDefaultPolicyAllow PlaybackIDUserAgentsDefaultPolicy = "allow"
	PlaybackIDUserAgentsDefaultPolicyDeny  PlaybackIDUserAgentsDefaultPolicy = "deny"
)

func (e PlaybackIDUserAgentsDefaultPolicy) ToPointer() *PlaybackIDUserAgentsDefaultPolicy {
	return &e
}
func (e *PlaybackIDUserAgentsDefaultPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = PlaybackIDUserAgentsDefaultPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackIDUserAgentsDefaultPolicy: %v", v)
	}
}

// PlaybackIDUserAgents - Restrictions based on the user agent (which is typically a string sent by browsers or bots identifying themselves).
type PlaybackIDUserAgents struct {
	// This sets the default behavior for user agent access (either "allow" or "deny").
	DefaultPolicy *PlaybackIDUserAgentsDefaultPolicy `json:"defaultPolicy,omitempty"`
	// A list of specific user agents that are allowed to access the resource.
	Allow []string `json:"allow,omitempty"`
	// A list of specific user agents that are blocked.
	Deny []string `json:"deny,omitempty"`
}

func (o *PlaybackIDUserAgents) GetDefaultPolicy() *PlaybackIDUserAgentsDefaultPolicy {
	if o == nil {
		return nil
	}
	return o.DefaultPolicy
}

func (o *PlaybackIDUserAgents) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *PlaybackIDUserAgents) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

// PlaybackIDAccessRestrictions - Controls access based on domains and user agents. Defines a default policy (either "allow" or "deny") and provides lists for explicitly allowed or denied domains and user agents.
type PlaybackIDAccessRestrictions struct {
	// Restrictions based on the originating domain of a request (e.g., whether requests from certain websites should be allowed or blocked).
	Domains *PlaybackIDDomains `json:"domains,omitempty"`
	// Restrictions based on the user agent (which is typically a string sent by browsers or bots identifying themselves).
	UserAgents *PlaybackIDUserAgents `json:"userAgents,omitempty"`
}

func (o *PlaybackIDAccessRestrictions) GetDomains() *PlaybackIDDomains {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *PlaybackIDAccessRestrictions) GetUserAgents() *PlaybackIDUserAgents {
	if o == nil {
		return nil
	}
	return o.UserAgents
}

// PlaybackID - A collection of Playback ID objects utilized for crafting HLS playback urls.
type PlaybackID struct {
	// A unique identifier is generated by FastPix for the playbacks.
	ID *string `json:"id,omitempty"`
	// Determines if access to the streamed content is kept private or available to all.
	AccessPolicy *PlaybackIDAccessPolicy `json:"accessPolicy,omitempty"`
	// Controls access based on domains and user agents. Defines a default policy (either "allow" or "deny") and provides lists for explicitly allowed or denied domains and user agents.
	AccessRestrictions *PlaybackIDAccessRestrictions `json:"accessRestrictions,omitempty"`
}

func (o *PlaybackID) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PlaybackID) GetAccessPolicy() *PlaybackIDAccessPolicy {
	if o == nil {
		return nil
	}
	return o.AccessPolicy
}

func (o *PlaybackID) GetAccessRestrictions() *PlaybackIDAccessRestrictions {
	if o == nil {
		return nil
	}
	return o.AccessRestrictions
}
