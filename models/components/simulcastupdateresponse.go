// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// SimulcastUpdateResponseMetadata - Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
type SimulcastUpdateResponseMetadata struct {
}

// SimulcastUpdateResponseData - Displays the result of the request.
type SimulcastUpdateResponseData struct {
	// When you create the new simulcast, FastPix assign a universal unique identifier which can contain a maximum of 255 characters.
	SimulcastID *string `json:"simulcastId,omitempty"`
	// The RTMP hostname, combined with the application name, is crucial for connecting to third-party live streaming services and transmitting the live stream.
	URL *string `json:"url,omitempty"`
	// A unique stream key is generated for streaming, allowing the user to start streaming on any third-party platform using this key.
	StreamKey *string `json:"streamKey,omitempty"`
	// When the value is set to false, the simulcast will be disabled for the given stream
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Arbitrary user-supplied metadata that will be included in the simulcast details. Can be used to store your own ID for a video along with the simulcast. Max:255 characters, Upto 10 entries are allowed.
	Metadata *SimulcastUpdateResponseMetadata `json:"metadata,omitempty"`
}

func (o *SimulcastUpdateResponseData) GetSimulcastID() *string {
	if o == nil {
		return nil
	}
	return o.SimulcastID
}

func (o *SimulcastUpdateResponseData) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *SimulcastUpdateResponseData) GetStreamKey() *string {
	if o == nil {
		return nil
	}
	return o.StreamKey
}

func (o *SimulcastUpdateResponseData) GetIsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.IsEnabled
}

func (o *SimulcastUpdateResponseData) GetMetadata() *SimulcastUpdateResponseMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

// SimulcastUpdateResponse - Displays the result of the request.
type SimulcastUpdateResponse struct {
	// It demonstrates whether the request is successful or not.
	Success *bool `json:"success,omitempty"`
	// Displays the result of the request.
	Data *SimulcastUpdateResponseData `json:"data,omitempty"`
}

func (o *SimulcastUpdateResponse) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

func (o *SimulcastUpdateResponse) GetData() *SimulcastUpdateResponseData {
	if o == nil {
		return nil
	}
	return o.Data
}
