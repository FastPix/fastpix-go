// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// WatermarkInputType - Type of overlay (currently only supports 'watermark').
type WatermarkInputType string

const (
	WatermarkInputTypeWatermark WatermarkInputType = "watermark"
)

func (e WatermarkInputType) ToPointer() *WatermarkInputType {
	return &e
}
func (e *WatermarkInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "watermark":
		*e = WatermarkInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WatermarkInputType: %v", v)
	}
}

// XAlign - Horizontal alignment of the watermark.
type XAlign string

const (
	XAlignLeft   XAlign = "left"
	XAlignCenter XAlign = "center"
	XAlignRight  XAlign = "right"
)

func (e XAlign) ToPointer() *XAlign {
	return &e
}
func (e *XAlign) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "left":
		fallthrough
	case "center":
		fallthrough
	case "right":
		*e = XAlign(v)
		return nil
	default:
		return fmt.Errorf("invalid value for XAlign: %v", v)
	}
}

// YAlign - Vertical alignment of the watermark.
type YAlign string

const (
	YAlignTop    YAlign = "top"
	YAlignMiddle YAlign = "middle"
	YAlignBottom YAlign = "bottom"
)

func (e YAlign) ToPointer() *YAlign {
	return &e
}
func (e *YAlign) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "top":
		fallthrough
	case "middle":
		fallthrough
	case "bottom":
		*e = YAlign(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YAlign: %v", v)
	}
}

type Placement struct {
	// Horizontal alignment of the watermark.
	XAlign *XAlign `json:"xAlign,omitempty"`
	// Horizontal margin from the edge of the video.
	XMargin *string `json:"xMargin,omitempty"`
	// Vertical alignment of the watermark.
	YAlign *YAlign `json:"yAlign,omitempty"`
	// Vertical margin from the edge of the video.
	YMargin *string `json:"yMargin,omitempty"`
}

func (o *Placement) GetXAlign() *XAlign {
	if o == nil {
		return nil
	}
	return o.XAlign
}

func (o *Placement) GetXMargin() *string {
	if o == nil {
		return nil
	}
	return o.XMargin
}

func (o *Placement) GetYAlign() *YAlign {
	if o == nil {
		return nil
	}
	return o.YAlign
}

func (o *Placement) GetYMargin() *string {
	if o == nil {
		return nil
	}
	return o.YMargin
}

type WatermarkInput struct {
	// Type of overlay (currently only supports 'watermark').
	Type *WatermarkInputType `json:"type,omitempty"`
	// URL of the watermark image.
	URL       *string    `json:"url,omitempty"`
	Placement *Placement `json:"placement,omitempty"`
	// Width of the watermark in percentage or pixels.
	Width *string `json:"width,omitempty"`
	// Height of the watermark in percentage or pixels.
	Height *string `json:"height,omitempty"`
	// Opacity of the watermark in percentage.
	Opacity *string `json:"opacity,omitempty"`
}

func (o *WatermarkInput) GetType() *WatermarkInputType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *WatermarkInput) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *WatermarkInput) GetPlacement() *Placement {
	if o == nil {
		return nil
	}
	return o.Placement
}

func (o *WatermarkInput) GetWidth() *string {
	if o == nil {
		return nil
	}
	return o.Width
}

func (o *WatermarkInput) GetHeight() *string {
	if o == nil {
		return nil
	}
	return o.Height
}

func (o *WatermarkInput) GetOpacity() *string {
	if o == nil {
		return nil
	}
	return o.Opacity
}
