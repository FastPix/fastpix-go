// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// AudioInputType - Type of overlay (currently only supports 'audio').
type AudioInputType string

const (
	AudioInputTypeAudio AudioInputType = "audio"
)

func (e AudioInputType) ToPointer() *AudioInputType {
	return &e
}
func (e *AudioInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "audio":
		*e = AudioInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioInputType: %v", v)
	}
}

type ImposeTrack struct {
	// URL of the audio track to impose on the video.
	URL *string `json:"url,omitempty"`
	// Start time (in seconds) of the imposed audio in the video.
	StartTime *int64 `json:"startTime,omitempty"`
	// End time (in seconds) of the imposed audio in the video.
	EndTime *int64 `json:"endTime,omitempty"`
	// Level of fade-in effect (in seconds) at the start of the imposed audio.
	FadeInLevel *int64 `json:"fadeInLevel,omitempty"`
	// Level of fade-out effect (in seconds) at the end of the imposed audio.
	FadeOutLevel *int64 `json:"fadeOutLevel,omitempty"`
}

func (o *ImposeTrack) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *ImposeTrack) GetStartTime() *int64 {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *ImposeTrack) GetEndTime() *int64 {
	if o == nil {
		return nil
	}
	return o.EndTime
}

func (o *ImposeTrack) GetFadeInLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.FadeInLevel
}

func (o *ImposeTrack) GetFadeOutLevel() *int64 {
	if o == nil {
		return nil
	}
	return o.FadeOutLevel
}

type AudioInput struct {
	// Type of overlay (currently only supports 'audio').
	Type *AudioInputType `json:"type,omitempty"`
	// URL of the audio track to replace the existing audio in the video.
	SwapTrackURL *string `json:"swapTrackUrl,omitempty"`
	// List of additional audio tracks to overlay on the video.
	ImposeTracks []ImposeTrack `json:"imposeTracks,omitempty"`
}

func (o *AudioInput) GetType() *AudioInputType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AudioInput) GetSwapTrackURL() *string {
	if o == nil {
		return nil
	}
	return o.SwapTrackURL
}

func (o *AudioInput) GetImposeTracks() []ImposeTrack {
	if o == nil {
		return nil
	}
	return o.ImposeTracks
}
