// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/FastPix/fastpix-go/internal/utils"
)

// PlaybackIDRequestAccessPolicy - Determines if access to the streamed content is kept private or available to all.
type PlaybackIDRequestAccessPolicy string

const (
	PlaybackIDRequestAccessPolicyPublic  PlaybackIDRequestAccessPolicy = "public"
	PlaybackIDRequestAccessPolicyPrivate PlaybackIDRequestAccessPolicy = "private"
)

func (e PlaybackIDRequestAccessPolicy) ToPointer() *PlaybackIDRequestAccessPolicy {
	return &e
}
func (e *PlaybackIDRequestAccessPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = PlaybackIDRequestAccessPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackIDRequestAccessPolicy: %v", v)
	}
}

type PlaybackIDRequest struct {
	// Determines if access to the streamed content is kept private or available to all.
	AccessPolicy *PlaybackIDRequestAccessPolicy `default:"public" json:"accessPolicy"`
}

func (p PlaybackIDRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaybackIDRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaybackIDRequest) GetAccessPolicy() *PlaybackIDRequestAccessPolicy {
	if o == nil {
		return nil
	}
	return o.AccessPolicy
}
