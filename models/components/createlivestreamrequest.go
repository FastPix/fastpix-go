// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/FastPix/fastpix-go/internal/utils"
)

// CreateLiveStreamRequestMaxResolution - Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
type CreateLiveStreamRequestMaxResolution string

const (
	CreateLiveStreamRequestMaxResolutionOneThousandAndEightyp  CreateLiveStreamRequestMaxResolution = "1080p"
	CreateLiveStreamRequestMaxResolutionSevenHundredAndTwentyp CreateLiveStreamRequestMaxResolution = "720p"
	CreateLiveStreamRequestMaxResolutionFourHundredAndEightyp  CreateLiveStreamRequestMaxResolution = "480p"
)

func (e CreateLiveStreamRequestMaxResolution) ToPointer() *CreateLiveStreamRequestMaxResolution {
	return &e
}
func (e *CreateLiveStreamRequestMaxResolution) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1080p":
		fallthrough
	case "720p":
		fallthrough
	case "480p":
		*e = CreateLiveStreamRequestMaxResolution(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLiveStreamRequestMaxResolution: %v", v)
	}
}

// MediaPolicy - Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
type MediaPolicy string

const (
	MediaPolicyPublic  MediaPolicy = "public"
	MediaPolicyPrivate MediaPolicy = "private"
)

func (e MediaPolicy) ToPointer() *MediaPolicy {
	return &e
}
func (e *MediaPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = MediaPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MediaPolicy: %v", v)
	}
}

// CreateLiveStreamRequestMetadata - You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
type CreateLiveStreamRequestMetadata struct {
}

// InputMediaSettings - Displays the result of the input Media settings.
type InputMediaSettings struct {
	// Max resolution can be used to control the maximum resolution your media is encoded, stored, and streamed at.
	MaxResolution *CreateLiveStreamRequestMaxResolution `default:"1080p" json:"maxResolution"`
	// In case the software streaming the live, get disrupted for any reason and get disconnect from FastPix, the reconnect window specifies the waiting time span of FastPix will wait before ending the stream. Before starting the stream, you can set the reconnect window time set which is up to 1800 seconds.
	ReconnectWindow *int64 `default:"60" json:"reconnectWindow"`
	// Determines whether the recorded stream should be publicly accessible or private in Live to VOD (Video on Demand).
	MediaPolicy *MediaPolicy `default:"public" json:"mediaPolicy"`
	// You can search for videos with specific key value pairs using metadata, when you tag a video in "key":"value"s pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
	Metadata *CreateLiveStreamRequestMetadata `json:"metadata,omitempty"`
}

func (i InputMediaSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputMediaSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputMediaSettings) GetMaxResolution() *CreateLiveStreamRequestMaxResolution {
	if o == nil {
		return nil
	}
	return o.MaxResolution
}

func (o *InputMediaSettings) GetReconnectWindow() *int64 {
	if o == nil {
		return nil
	}
	return o.ReconnectWindow
}

func (o *InputMediaSettings) GetMediaPolicy() *MediaPolicy {
	if o == nil {
		return nil
	}
	return o.MediaPolicy
}

func (o *InputMediaSettings) GetMetadata() *CreateLiveStreamRequestMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type CreateLiveStreamRequest struct {
	// Displays the result of the playback settings.
	PlaybackSettings PlaybackSettings `json:"playbackSettings"`
	// Displays the result of the input Media settings.
	InputMediaSettings InputMediaSettings `json:"inputMediaSettings"`
}

func (o *CreateLiveStreamRequest) GetPlaybackSettings() PlaybackSettings {
	if o == nil {
		return PlaybackSettings{}
	}
	return o.PlaybackSettings
}

func (o *CreateLiveStreamRequest) GetInputMediaSettings() InputMediaSettings {
	if o == nil {
		return InputMediaSettings{}
	}
	return o.InputMediaSettings
}
