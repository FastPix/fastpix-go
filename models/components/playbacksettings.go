// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/FastPix/fastpix-go/internal/utils"
)

// PlaybackSettingsAccessPolicy - Determines if access to the streamed content is kept private or available to all.
type PlaybackSettingsAccessPolicy string

const (
	PlaybackSettingsAccessPolicyPublic  PlaybackSettingsAccessPolicy = "public"
	PlaybackSettingsAccessPolicyPrivate PlaybackSettingsAccessPolicy = "private"
)

func (e PlaybackSettingsAccessPolicy) ToPointer() *PlaybackSettingsAccessPolicy {
	return &e
}
func (e *PlaybackSettingsAccessPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		*e = PlaybackSettingsAccessPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaybackSettingsAccessPolicy: %v", v)
	}
}

// PlaybackSettings - Displays the result of the playback settings.
type PlaybackSettings struct {
	// Determines if access to the streamed content is kept private or available to all.
	AccessPolicy *PlaybackSettingsAccessPolicy `default:"public" json:"accessPolicy"`
}

func (p PlaybackSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PlaybackSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PlaybackSettings) GetAccessPolicy() *PlaybackSettingsAccessPolicy {
	if o == nil {
		return nil
	}
	return o.AccessPolicy
}
