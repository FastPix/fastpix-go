// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/FastPix/fastpix-go/models/components"
)

// CreateMediaPlaybackIDAccessPolicy - Determines if access to the streamed content is kept private or available to all.
type CreateMediaPlaybackIDAccessPolicy string

const (
	CreateMediaPlaybackIDAccessPolicyPublic  CreateMediaPlaybackIDAccessPolicy = "public"
	CreateMediaPlaybackIDAccessPolicyPrivate CreateMediaPlaybackIDAccessPolicy = "private"
	CreateMediaPlaybackIDAccessPolicyDrm     CreateMediaPlaybackIDAccessPolicy = "drm"
)

func (e CreateMediaPlaybackIDAccessPolicy) ToPointer() *CreateMediaPlaybackIDAccessPolicy {
	return &e
}
func (e *CreateMediaPlaybackIDAccessPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "public":
		fallthrough
	case "private":
		fallthrough
	case "drm":
		*e = CreateMediaPlaybackIDAccessPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMediaPlaybackIDAccessPolicy: %v", v)
	}
}

// CreateMediaPlaybackIDDomainsDefaultPolicy - Specifies the default access policy for domains.
// If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list.
// If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
type CreateMediaPlaybackIDDomainsDefaultPolicy string

const (
	CreateMediaPlaybackIDDomainsDefaultPolicyAllow CreateMediaPlaybackIDDomainsDefaultPolicy = "allow"
	CreateMediaPlaybackIDDomainsDefaultPolicyDeny  CreateMediaPlaybackIDDomainsDefaultPolicy = "deny"
)

func (e CreateMediaPlaybackIDDomainsDefaultPolicy) ToPointer() *CreateMediaPlaybackIDDomainsDefaultPolicy {
	return &e
}
func (e *CreateMediaPlaybackIDDomainsDefaultPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = CreateMediaPlaybackIDDomainsDefaultPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMediaPlaybackIDDomainsDefaultPolicy: %v", v)
	}
}

type CreateMediaPlaybackIDDomains struct {
	// Specifies the default access policy for domains.
	// If set to `allow`, all domains are allowed access unless otherwise specified in the `deny` list.
	// If set to `deny`, all domains are denied access unless otherwise specified in the `allow` list.
	//
	DefaultPolicy *CreateMediaPlaybackIDDomainsDefaultPolicy `json:"defaultPolicy,omitempty"`
	// A list of domain names or patterns that are explicitly allowed access.
	// This list is only effective when the `defaultPolicy` is set to `deny`.
	//
	Allow []string `json:"allow,omitempty"`
	// A list of domain names or patterns that are explicitly denied access.
	// This list is only effective when the `defaultPolicy` is set to `allow`.
	//
	Deny []string `json:"deny,omitempty"`
}

func (o *CreateMediaPlaybackIDDomains) GetDefaultPolicy() *CreateMediaPlaybackIDDomainsDefaultPolicy {
	if o == nil {
		return nil
	}
	return o.DefaultPolicy
}

func (o *CreateMediaPlaybackIDDomains) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *CreateMediaPlaybackIDDomains) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

// CreateMediaPlaybackIDUserAgentsDefaultPolicy - Specifies the default access policy for user agents (browsers, bots, etc.).
// If set to `allow`, all user agents are allowed access unless otherwise specified in the `deny` list.
// If set to `deny`, all user agents are denied access unless otherwise specified in the `allow` list.
type CreateMediaPlaybackIDUserAgentsDefaultPolicy string

const (
	CreateMediaPlaybackIDUserAgentsDefaultPolicyAllow CreateMediaPlaybackIDUserAgentsDefaultPolicy = "allow"
	CreateMediaPlaybackIDUserAgentsDefaultPolicyDeny  CreateMediaPlaybackIDUserAgentsDefaultPolicy = "deny"
)

func (e CreateMediaPlaybackIDUserAgentsDefaultPolicy) ToPointer() *CreateMediaPlaybackIDUserAgentsDefaultPolicy {
	return &e
}
func (e *CreateMediaPlaybackIDUserAgentsDefaultPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "deny":
		*e = CreateMediaPlaybackIDUserAgentsDefaultPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMediaPlaybackIDUserAgentsDefaultPolicy: %v", v)
	}
}

type CreateMediaPlaybackIDUserAgents struct {
	// Specifies the default access policy for user agents (browsers, bots, etc.).
	// If set to `allow`, all user agents are allowed access unless otherwise specified in the `deny` list.
	// If set to `deny`, all user agents are denied access unless otherwise specified in the `allow` list.
	//
	DefaultPolicy *CreateMediaPlaybackIDUserAgentsDefaultPolicy `json:"defaultPolicy,omitempty"`
	// A list of user agents (identified by string names or patterns) that are explicitly allowed access.
	// This list is only effective when the `defaultPolicy` is set to `deny`.
	//
	Allow []string `json:"allow,omitempty"`
	// A list of user agents (identified by string names or patterns) that are explicitly denied access.
	// This list is only effective when the `defaultPolicy` is set to `allow`.
	//
	Deny []string `json:"deny,omitempty"`
}

func (o *CreateMediaPlaybackIDUserAgents) GetDefaultPolicy() *CreateMediaPlaybackIDUserAgentsDefaultPolicy {
	if o == nil {
		return nil
	}
	return o.DefaultPolicy
}

func (o *CreateMediaPlaybackIDUserAgents) GetAllow() []string {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *CreateMediaPlaybackIDUserAgents) GetDeny() []string {
	if o == nil {
		return nil
	}
	return o.Deny
}

type CreateMediaPlaybackIDAccessRestrictions struct {
	Domains    *CreateMediaPlaybackIDDomains    `json:"domains,omitempty"`
	UserAgents *CreateMediaPlaybackIDUserAgents `json:"userAgents,omitempty"`
}

func (o *CreateMediaPlaybackIDAccessRestrictions) GetDomains() *CreateMediaPlaybackIDDomains {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *CreateMediaPlaybackIDAccessRestrictions) GetUserAgents() *CreateMediaPlaybackIDUserAgents {
	if o == nil {
		return nil
	}
	return o.UserAgents
}

// CreateMediaPlaybackIDRequestBody - Request body for creating playback id for an media
type CreateMediaPlaybackIDRequestBody struct {
	// Determines if access to the streamed content is kept private or available to all.
	AccessPolicy       CreateMediaPlaybackIDAccessPolicy        `json:"accessPolicy"`
	AccessRestrictions *CreateMediaPlaybackIDAccessRestrictions `json:"accessRestrictions,omitempty"`
}

func (o *CreateMediaPlaybackIDRequestBody) GetAccessPolicy() CreateMediaPlaybackIDAccessPolicy {
	if o == nil {
		return CreateMediaPlaybackIDAccessPolicy("")
	}
	return o.AccessPolicy
}

func (o *CreateMediaPlaybackIDRequestBody) GetAccessRestrictions() *CreateMediaPlaybackIDAccessRestrictions {
	if o == nil {
		return nil
	}
	return o.AccessRestrictions
}

type CreateMediaPlaybackIDRequest struct {
	// When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
	MediaID string `pathParam:"style=simple,explode=false,name=mediaId"`
	// Request body for creating playback id for an media
	RequestBody *CreateMediaPlaybackIDRequestBody `request:"mediaType=application/json"`
}

func (o *CreateMediaPlaybackIDRequest) GetMediaID() string {
	if o == nil {
		return ""
	}
	return o.MediaID
}

func (o *CreateMediaPlaybackIDRequest) GetRequestBody() *CreateMediaPlaybackIDRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// Data - Displays the result of the request.
type Data struct {
	// A collection of Playback ID objects utilized for crafting HLS playback URLs.
	PlaybackIds []components.PlaybackID `json:"playbackIds,omitempty"`
}

func (o *Data) GetPlaybackIds() []components.PlaybackID {
	if o == nil {
		return nil
	}
	return o.PlaybackIds
}

// CreateMediaPlaybackIDResponseBody - Playback id for an media
type CreateMediaPlaybackIDResponseBody struct {
	// Demonstrates whether the request is successful or not.
	Success *bool `json:"success,omitempty"`
	// Displays the result of the request.
	Data *Data `json:"data,omitempty"`
}

func (o *CreateMediaPlaybackIDResponseBody) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

func (o *CreateMediaPlaybackIDResponseBody) GetData() *Data {
	if o == nil {
		return nil
	}
	return o.Data
}

type CreateMediaPlaybackIDResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Playback id for an media
	Object *CreateMediaPlaybackIDResponseBody
}

func (o *CreateMediaPlaybackIDResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateMediaPlaybackIDResponse) GetObject() *CreateMediaPlaybackIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
