// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/FastPix/fastpix-go/models/components"
)

// UpdatedMediaMetadata - You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
type UpdatedMediaMetadata struct {
}

type UpdatedMediaRequestBody struct {
	// You can search for videos with specific key value pairs using metadata, when you tag a video in "key" : "value" pairs. Dynamic Metadata allows you to define a key that allows any value pair. You can have maximum of 255 characters and upto 10 entries are allowed.
	Metadata *UpdatedMediaMetadata `json:"metadata,omitempty"`
}

func (o *UpdatedMediaRequestBody) GetMetadata() *UpdatedMediaMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type UpdatedMediaRequest struct {
	// When creating the media, FastPix assigns a universally unique identifier with a maximum length of 255 characters.
	MediaID     string                   `pathParam:"style=simple,explode=false,name=mediaId"`
	RequestBody *UpdatedMediaRequestBody `request:"mediaType=application/json"`
}

func (o *UpdatedMediaRequest) GetMediaID() string {
	if o == nil {
		return ""
	}
	return o.MediaID
}

func (o *UpdatedMediaRequest) GetRequestBody() *UpdatedMediaRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdatedMediaResponseBody - Media details updated successfully
type UpdatedMediaResponseBody struct {
	// Demonstrates whether the request is successful or not.
	Success *bool             `json:"success,omitempty"`
	Data    *components.Media `json:"data,omitempty"`
}

func (o *UpdatedMediaResponseBody) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

func (o *UpdatedMediaResponseBody) GetData() *components.Media {
	if o == nil {
		return nil
	}
	return o.Data
}

type UpdatedMediaResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Media details updated successfully
	Object *UpdatedMediaResponseBody
}

func (o *UpdatedMediaResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdatedMediaResponse) GetObject() *UpdatedMediaResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
