// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/FastPix/fastpix-go/internal/utils"
	"github.com/FastPix/fastpix-go/models/components"
)

// ListMediaOrderBy - The values in the list can be arranged in two ways: DESC (Descending) or ASC (Ascending).
type ListMediaOrderBy string

const (
	ListMediaOrderByAsc  ListMediaOrderBy = "asc"
	ListMediaOrderByDesc ListMediaOrderBy = "desc"
)

func (e ListMediaOrderBy) ToPointer() *ListMediaOrderBy {
	return &e
}
func (e *ListMediaOrderBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = ListMediaOrderBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListMediaOrderBy: %v", v)
	}
}

type ListMediaRequest struct {
	// Limit specifies the maximum number of items to display per page.
	Limit *int64 `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Offset determines the starting point for data retrieval within a paginated list.
	Offset *int64 `default:"1" queryParam:"style=form,explode=true,name=offset"`
	// The values in the list can be arranged in two ways: DESC (Descending) or ASC (Ascending).
	OrderBy *ListMediaOrderBy `default:"desc" queryParam:"style=form,explode=true,name=orderBy"`
}

func (l ListMediaRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListMediaRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListMediaRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListMediaRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListMediaRequest) GetOrderBy() *ListMediaOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

// ListMediaResponseBody - List of video media
type ListMediaResponseBody struct {
	// Demonstrates whether the request is successful or not.
	Success *bool `json:"success,omitempty"`
	// Displays the result of the request.
	Data []components.Media `json:"data,omitempty"`
	// Pagination organizes content into pages for better readability and navigation.
	Pagination *components.Pagination `json:"pagination,omitempty"`
}

func (o *ListMediaResponseBody) GetSuccess() *bool {
	if o == nil {
		return nil
	}
	return o.Success
}

func (o *ListMediaResponseBody) GetData() []components.Media {
	if o == nil {
		return nil
	}
	return o.Data
}

func (o *ListMediaResponseBody) GetPagination() *components.Pagination {
	if o == nil {
		return nil
	}
	return o.Pagination
}

type ListMediaResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// List of video media
	Object *ListMediaResponseBody
}

func (o *ListMediaResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListMediaResponse) GetObject() *ListMediaResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
