// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/FastPix/fastpix-go/internal/utils"
	"github.com/FastPix/fastpix-go/models/components"
)

// GetAllStreamsOrderBy - The list of value can be order in two ways DESC (Descending) or ASC (Ascending). In case not specified, by default it will be DESC.
type GetAllStreamsOrderBy string

const (
	GetAllStreamsOrderByAsc  GetAllStreamsOrderBy = "asc"
	GetAllStreamsOrderByDesc GetAllStreamsOrderBy = "desc"
)

func (e GetAllStreamsOrderBy) ToPointer() *GetAllStreamsOrderBy {
	return &e
}
func (e *GetAllStreamsOrderBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = GetAllStreamsOrderBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAllStreamsOrderBy: %v", v)
	}
}

type GetAllStreamsRequest struct {
	// Limit specifies the maximum number of items to display per page.
	Limit *string `default:"10" queryParam:"style=form,explode=true,name=limit"`
	// Offset determines the starting point for data retrieval within a paginated list.
	Offset *string `default:"1" queryParam:"style=form,explode=true,name=offset"`
	// The list of value can be order in two ways DESC (Descending) or ASC (Ascending). In case not specified, by default it will be DESC.
	OrderBy *GetAllStreamsOrderBy `default:"desc" queryParam:"style=form,explode=true,name=orderBy"`
}

func (g GetAllStreamsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAllStreamsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAllStreamsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetAllStreamsRequest) GetOffset() *string {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetAllStreamsRequest) GetOrderBy() *GetAllStreamsOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

type GetAllStreamsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// All streams retrieved sucessfully
	GetStreamsResponse *components.GetStreamsResponse
}

func (o *GetAllStreamsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetAllStreamsResponse) GetGetStreamsResponse() *components.GetStreamsResponse {
	if o == nil {
		return nil
	}
	return o.GetStreamsResponse
}
